name: Tests

on: [push, pull_request]

jobs:
  Unit_Tests_Tools:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cache build
      id: cache-build
      uses: actions/cache@v2
      with:
        path: |
          lib
          src
          test
        key: tests-${{ runner.os }}-${{ github.sha }}
        restore-keys: tests-${{ runner.os }}
    - name: Force git update
      if: steps.cache-build.outputs.cache-hit == 'true'
      run: git fetch; git reset --hard FETCH_HEAD
    - name: Install the Google test suite
      if: steps.cache-build.outputs.cache-hit != 'true'
      env:
        MAKEFLAGS: "-j 2"
      run: (cd test; make install-googletest)
    - name: Build the tools unit tests
      env:
        MAKEFLAGS: "-j 2"
      run: (cd tools; make all)
    - name: Run the tools unit tests
      env:
        MAKEFLAGS: "-j 2"
      run: (cd tools; make run_tests)
    - name: Build basic test dependencies (use in cache)
      env:
        MAKEFLAGS: "-j 2"
      run: (cd test; make IRac_test)
    - name: list files
      run: (echo ~/; pwd; ls -lha; du -sh *)

  Gen_Test_Matrix:
    outputs:
      matrix: ${{ steps.files.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Generate Matrix of unit tests
      id: files
      run: |
        JSONI=$(find test -name *_test.cpp -type f | sed 's,test/,,;s,_test.cpp$,,' | xargs -I {} echo -e '"{}",')
        # Remove last "," and add closing brackets
        if [[ $JSONI == *, ]]; then
        JSONI="${JSONI%?}"
        fi
        JSONI=${JSONI//$'\n'}
        echo $JSONI
        # Set output
        echo "::set-output name=matrix::[${JSONI}]"
    - name: Install the Google test suite
      env:
        MAKEFLAGS: "-j 2"
      run: (cd test; make install-googletest)

  Unit_Test:
    needs: [Unit_Tests_Tools, Gen_Test_Matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: ${{fromJson(needs.Gen_Test_Matrix.outputs.matrix)}}

    steps:
    - name: Cache build and checkout
      uses: actions/cache@v2
      with:
        path: |
          lib
          src
          test
        key: tests-${{ runner.os }}-${{ github.sha }}
        restore-keys: tests-${{ runner.os }}
    - name: Build and run unit test ${{ matrix.test }}
      env:
        MAKEFLAGS: "-j 2"
      run: (cd test; make run-${{ matrix.test }})
